This is a very early prototype for my chroot-friendly implementation of sudo, which uses a local tcp socket for privilege escalation in place of traditional methods (setuid / setgid, etc). This is to work around the inherent fuckiness of chroots, especially when using qemu-user-static for cross-arch.

Authentication is handled via public/private keypair. See the keygen included. Edit daemon and tcudo to point at your priv(daemon) and pub(tsudo) keys. This is to allow for granting and revoking tcudo access (not to mention, for network security reasons).

Reminder that this is extremely-not-ready at the moment, so no QQing all over my issue tracker if your computer starts speaking backwards, spends all your money on 1970s hospital gowns, or otherwise acts in a rude or unpleasant manner towards you or your kin.


I'll do a proper writeup / tutorial / blablabla when it's a bit more fleshed out. For now, the basic steps are as follows:

1 - chroot into whatever distro as per usual

2 - generate a key with generatekey, move pubkey to non root user's home, and privkey to /root. Change ownership of pubkey to non-root user. 

3 - edit daemon and tcudo, change the line in each near the beginning so tcudo points at pubkey and daemon at priv. Use absolute paths (i.e, /home/user/somekey-pub and not something like ~/somekey-pub)

4 - move daemon and tcudo to somewhere in your PATH (or dont, it'll work from anywhere so it's whatever)

5 - as root, run daemon like "daemon &> /dev/null &".

6 - log into your non-root user without leaving chroot (i.e, just do su someuser). You can now run commands as root with tcudo.


Oh yeah - and you'll need xxd, and soon, tmux (and probably something else I'm forgetting lmao good luck).
